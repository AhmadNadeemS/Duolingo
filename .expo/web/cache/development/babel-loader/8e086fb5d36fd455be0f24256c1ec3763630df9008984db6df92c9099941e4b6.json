{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport styles from \"./styles\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../Button\";\nimport WordOption from \"../WordOption\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FillInTheBlank = function FillInTheBlank(_ref) {\n  var question = _ref.question,\n    onCorrect = _ref.onCorrect,\n    onWrong = _ref.onWrong;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedOptions = _useState2[0],\n    setSelectedOptions = _useState2[1];\n  var _useState3 = useState(question.parts),\n    _useState4 = _slicedToArray(_useState3, 2),\n    parts = _useState4[0],\n    setParts = _useState4[1];\n  var onButtonPress = function onButtonPress() {\n    if (checkIfCorrect()) {\n      onCorrect();\n    } else {\n      onWrong();\n    }\n  };\n  var addOptionsToSelected = function addOptionsToSelected(option) {\n    if (isSelected(option)) {\n      return;\n    }\n    var newParts = _toConsumableArray(parts);\n    for (var i = 0; i < newParts.length; i++) {\n      if (newParts[i].isBlank && !newParts[i].selected) {\n        newParts[i].selected = option;\n        break;\n      }\n    }\n    setParts(newParts);\n  };\n  var removeOptionFromSelected = function removeOptionFromSelected(index) {\n    var newParts = _toConsumableArray(parts);\n    newParts[index].selected = null;\n    setParts(newParts);\n  };\n  var isSelected = function isSelected(option) {\n    return parts.filter(function (part) {\n      return part.isBlank && part.selected === option;\n    }).length > 0;\n  };\n  var checkIfCorrect = function checkIfCorrect() {\n    return parts.filter(function (part) {\n      return part.isBlank && part.text !== part.selected;\n    }).length === 0;\n  };\n  var isReadyToCheck = function isReadyToCheck() {\n    return parts.filter(function (part) {\n      return part.isBlank && !part.selected;\n    }).length > 0;\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Complete the sentence\"\n    }), _jsx(View, {\n      style: styles.row,\n      children: parts.map(function (part, index) {\n        if (part.isBlank) {\n          return _jsx(View, {\n            style: styles.blank,\n            children: part.selected && _jsx(WordOption, {\n              text: part == null ? void 0 : part.selected,\n              onPress: function onPress() {\n                return removeOptionFromSelected(index);\n              }\n            }, index)\n          });\n        } else {\n          return _jsx(Text, {\n            style: styles.text,\n            children: part.text\n          });\n        }\n      })\n    }), _jsx(View, {\n      style: styles.optionsContainer,\n      children: question == null ? void 0 : question.options.map(function (option, index) {\n        return _jsx(WordOption, {\n          text: option,\n          isSelected: isSelected(option),\n          onPress: function onPress() {\n            return addOptionsToSelected(option);\n          }\n        }, index);\n      })\n    }), _jsx(Button, {\n      text: \"Check\",\n      onPress: onButtonPress,\n      disabled: isReadyToCheck()\n    })]\n  });\n};\nexport default FillInTheBlank;","map":{"version":3,"names":["styles","View","Button","WordOption","useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","FillInTheBlank","_ref","question","onCorrect","onWrong","_useState","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","_useState3","parts","_useState4","setParts","onButtonPress","checkIfCorrect","addOptionsToSelected","option","isSelected","newParts","_toConsumableArray","i","length","isBlank","selected","removeOptionFromSelected","index","filter","part","text","isReadyToCheck","children","Text","style","title","row","map","blank","onPress","optionsContainer","options","disabled"],"sources":["C:/Users/Dell/projects/Duolingo/src/components/FillInTheBlank/FillInTheBlank.js"],"sourcesContent":["import { Text } from \"react-native\";\r\nimport styles from \"./styles\";\r\nimport { View } from \"react-native\";\r\nimport Button from \"../Button\";\r\nimport WordOption from \"../WordOption\";\r\nimport { useState } from \"react\";\r\nconst FillInTheBlank = ({ question, onCorrect, onWrong }) => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [parts, setParts] = useState(question.parts);\r\n  const onButtonPress = () => {\r\n    if (checkIfCorrect()) {\r\n      onCorrect();\r\n    } else {\r\n      onWrong();\r\n    }\r\n    // setSelectedOption(null);\r\n  };\r\n\r\n  const addOptionsToSelected = (option) => {\r\n    // const numberOfBlanks = question.parts.filter((part) => part.isBlank).length;\r\n    // if (numberOfBlanks > selectedOptions.length) {\r\n    //   setSelectedOptions([...selectedOptions, option]);\r\n    // }\r\n    if (isSelected(option)) {\r\n      return;\r\n    }\r\n    const newParts = [...parts];\r\n    for (let i = 0; i < newParts.length; i++) {\r\n      if (newParts[i].isBlank && !newParts[i].selected) {\r\n        newParts[i].selected = option;\r\n        break;\r\n      }\r\n    }\r\n    setParts(newParts);\r\n  };\r\n\r\n  const removeOptionFromSelected = (index) => {\r\n    const newParts = [...parts];\r\n    newParts[index].selected = null;\r\n    setParts(newParts);\r\n  };\r\n\r\n  const isSelected = (option) => {\r\n    return (\r\n      parts.filter((part) => part.isBlank && part.selected === option).length >\r\n      0\r\n    );\r\n  };\r\n\r\n  const checkIfCorrect = () => {\r\n    return (\r\n      parts.filter((part) => part.isBlank && part.text !== part.selected)\r\n        .length === 0\r\n    );\r\n  };\r\n  //   const isReadyToCheck = () => {\r\n  //     let v = parts.filter((part) => part.isBlank && !part.selected).length;\r\n\r\n  //     console.log(v);\r\n  //   };\r\n\r\n  //   const checkIfCorrect = () => {\r\n  //     const c = parts.filter(\r\n  //       (part) => part.isBlank && part.selected !== part.text\r\n  //     );\r\n  //     console.log(c);\r\n  //     // .length === 0;\r\n  //     // return c;\r\n  //   };\r\n  const isReadyToCheck = () => {\r\n    // return parts.filter((part) => part.isBlank && !part.selected).length > 0;\r\n    return parts.filter((part) => part.isBlank && !part.selected).length > 0;\r\n  };\r\n  return (\r\n    <>\r\n      <Text style={styles.title}>Complete the sentence</Text>\r\n\r\n      <View style={styles.row}>\r\n        {parts.map((part, index) => {\r\n          if (part.isBlank) {\r\n            return (\r\n              <View style={styles.blank}>\r\n                {part.selected && (\r\n                  <WordOption\r\n                    key={index}\r\n                    text={part?.selected}\r\n                    onPress={() => removeOptionFromSelected(index)}\r\n                  />\r\n                )}\r\n              </View>\r\n            );\r\n          } else {\r\n            return <Text style={styles.text}>{part.text}</Text>;\r\n          }\r\n        })}\r\n      </View>\r\n      <View style={styles.optionsContainer}>\r\n        {question?.options.map((option, index) => {\r\n          //   console.log(option);\r\n          return (\r\n            <WordOption\r\n              key={index}\r\n              text={option}\r\n              isSelected={isSelected(option)}\r\n              onPress={() => addOptionsToSelected(option)}\r\n            />\r\n          );\r\n        })}\r\n      </View>\r\n      <Button\r\n        text=\"Check\"\r\n        onPress={onButtonPress}\r\n        disabled={isReadyToCheck()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FillInTheBlank;\r\n\r\n// creates issues on removing item from an exact index. As second blank takes place of first one\r\n\r\n// import { Text } from \"react-native\";\r\n// import styles from \"./styles\";\r\n// import { View } from \"react-native\";\r\n// import Button from \"../Button\";\r\n// import WordOption from \"../WordOption\";\r\n// import { useState } from \"react\";\r\n// const FillInTheBlank = ({ question, onCorrect, onWrong }) => {\r\n//   const [selectedOptions, setSelectedOptions] = useState([]);\r\n//   console.log(selectedOptions);\r\n//   const onButtonPress = () => {\r\n//     // if (selectedOption === question.correct) {\r\n//     //   onCorrect();\r\n//     // } else {\r\n//     //   onWrong();\r\n//     // }\r\n//     // setSelectedOption(null);\r\n//   };\r\n\r\n//   const addOptionsToSelected = (option) => {\r\n//     const numberOfBlanks = question.parts.filter((part) => part.isBlank).length;\r\n//     if (numberOfBlanks > selectedOptions.length) {\r\n//       setSelectedOptions([...selectedOptions, option]);\r\n//     }\r\n//   };\r\n\r\n//   const removeOptionFromSelected = (option) => {\r\n//     setSelectedOptions(\r\n//       selectedOptions.filter((selectedOption) => selectedOption === option)\r\n//     );\r\n//   };\r\n//   console.log(selectedOptions);\r\n//   let blankIndex = -1;\r\n//   return (\r\n//     <>\r\n//       <Text style={styles.title}>Complete the sentence</Text>\r\n\r\n//       <View style={styles.row}>\r\n//         {question?.parts.map((part, index) => {\r\n//           if (part.isBlank) {\r\n//             blankIndex += 1;\r\n//             return (\r\n//               <View style={styles.blank}>\r\n//                 {selectedOptions.length > blankIndex && (\r\n//                   <WordOption\r\n//                     key={index}\r\n//                     text={selectedOptions[blankIndex]}\r\n//                     onPress={() =>\r\n//                       removeOptionFromSelected(selectedOptions[blankIndex])\r\n//                     }\r\n//                   />\r\n//                 )}\r\n//               </View>\r\n//             );\r\n//           } else {\r\n//             return <Text style={styles.text}>{part.text}</Text>;\r\n//           }\r\n//         })}\r\n//       </View>\r\n//       <View style={styles.optionsContainer}>\r\n//         {question?.options.map((option, index) => {\r\n//           //   console.log(option);\r\n//           return (\r\n//             <WordOption\r\n//               key={index}\r\n//               text={option}\r\n//               isSelected={selectedOptions.includes(option)}\r\n//               onPress={() => addOptionsToSelected(option)}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </View>\r\n//       <Button\r\n//         text=\"Check\"\r\n//         onPress={onButtonPress}\r\n//         disabled={!selectedOptions.length}\r\n//       />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FillInTheBlank;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}