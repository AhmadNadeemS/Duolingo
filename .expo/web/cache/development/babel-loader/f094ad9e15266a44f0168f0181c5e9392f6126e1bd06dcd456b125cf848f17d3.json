{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport styles from \"./styles\";\nimport mascot from \"../../../assets/images/mascot.png\";\nimport Button from \"../Button\";\nimport { useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar OpenEndedQuestion = function OpenEndedQuestion(_ref) {\n  var question = _ref.question,\n    onCorrect = _ref.onCorrect,\n    onWrong = _ref.onWrong;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    input = _useState2[0],\n    setInput = _useState2[1];\n  var onButtonPress = function onButtonPress() {\n    if (question.answer === input) {\n      onCorrect();\n    } else {\n      onWrong();\n    }\n    setInput(\"\");\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Translate this text\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Image, {\n        source: mascot,\n        style: styles.mascot\n      }), _jsx(View, {\n        style: styles.sentenceContainer,\n        children: _jsx(Text, {\n          style: styles.sentence,\n          children: question.text\n        })\n      })]\n    }), _jsx(TextInput, {\n      placeholder: \"Type in English\",\n      style: styles.textInput,\n      value: input,\n      onChangeText: function onChangeText(changedValue) {\n        return setInput(changedValue);\n      },\n      textAlignVertical: \"top\",\n      multiline: true\n    }), _jsx(Button, {\n      text: \"Check\",\n      onPress: onButtonPress,\n      disabled: !input\n    })]\n  });\n};\nexport default OpenEndedQuestion;","map":{"version":3,"names":["styles","mascot","Button","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","OpenEndedQuestion","_ref","question","onCorrect","onWrong","_useState","_useState2","_slicedToArray","input","setInput","onButtonPress","answer","children","Text","style","title","View","row","Image","source","sentenceContainer","sentence","text","TextInput","placeholder","textInput","value","onChangeText","changedValue","textAlignVertical","multiline","onPress","disabled"],"sources":["C:/Users/Dell/projects/Duolingo/src/components/OpenEndedQuestion/OpenEndedQuestion.js"],"sourcesContent":["import { Text, View, TextInput, Image } from \"react-native\";\r\nimport styles from \"./styles\";\r\nimport mascot from \"../../../assets/images/mascot.png\";\r\nimport Button from \"../Button\";\r\nimport { useState } from \"react\";\r\nconst OpenEndedQuestion = ({ question, onCorrect, onWrong }) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const onButtonPress = () => {\r\n    if (question.answer === input) {\r\n      onCorrect();\r\n    } else {\r\n      onWrong();\r\n    }\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <>\r\n      <Text style={styles.title}>Translate this text</Text>\r\n      <View style={styles.row}>\r\n        <Image source={mascot} style={styles.mascot} />\r\n        <View style={styles.sentenceContainer}>\r\n          <Text style={styles.sentence}>{question.text}</Text>\r\n        </View>\r\n      </View>\r\n      <TextInput\r\n        placeholder=\"Type in English\"\r\n        style={styles.textInput}\r\n        value={input}\r\n        onChangeText={(changedValue) => setInput(changedValue)}\r\n        textAlignVertical=\"top\"\r\n        multiline\r\n      />\r\n      <Button text=\"Check\" onPress={onButtonPress} disabled={!input} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OpenEndedQuestion;\r\n"],"mappings":";;;;;AACA,OAAOA,MAAM;AACb,OAAOC,MAAM;AACb,OAAOC,MAAM;AACb,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAAyC;EAAA,IAAnCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EACvD,IAAAC,SAAA,GAA0BZ,QAAQ,CAAC,EAAE,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IAC1B,IAAIR,QAAQ,CAACS,MAAM,KAAKH,KAAK,EAAE;MAC7BL,SAAS,EAAE;IACb,CAAC,MAAM;MACLC,OAAO,EAAE;IACX;IACAK,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EACD,OACEZ,KAAA,CAAAE,SAAA;IAAAa,QAAA,GACEjB,IAAA,CAACkB,IAAI;MAACC,KAAK,EAAExB,MAAM,CAACyB,KAAM;MAAAH,QAAA,EAAC;IAAmB,EAAO,EACrDf,KAAA,CAACmB,IAAI;MAACF,KAAK,EAAExB,MAAM,CAAC2B,GAAI;MAAAL,QAAA,GACtBjB,IAAA,CAACuB,KAAK;QAACC,MAAM,EAAE5B,MAAO;QAACuB,KAAK,EAAExB,MAAM,CAACC;MAAO,EAAG,EAC/CI,IAAA,CAACqB,IAAI;QAACF,KAAK,EAAExB,MAAM,CAAC8B,iBAAkB;QAAAR,QAAA,EACpCjB,IAAA,CAACkB,IAAI;UAACC,KAAK,EAAExB,MAAM,CAAC+B,QAAS;UAAAT,QAAA,EAAEV,QAAQ,CAACoB;QAAI;MAAQ,EAC/C;IAAA,EACF,EACP3B,IAAA,CAAC4B,SAAS;MACRC,WAAW,EAAC,iBAAiB;MAC7BV,KAAK,EAAExB,MAAM,CAACmC,SAAU;MACxBC,KAAK,EAAElB,KAAM;MACbmB,YAAY,EAAE,SAAAA,aAACC,YAAY;QAAA,OAAKnB,QAAQ,CAACmB,YAAY,CAAC;MAAA,CAAC;MACvDC,iBAAiB,EAAC,KAAK;MACvBC,SAAS;IAAA,EACT,EACFnC,IAAA,CAACH,MAAM;MAAC8B,IAAI,EAAC,OAAO;MAACS,OAAO,EAAErB,aAAc;MAACsB,QAAQ,EAAE,CAACxB;IAAM,EAAG;EAAA,EAChE;AAEP,CAAC;AAED,eAAeR,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}