{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import Text from\"react-native-web/dist/exports/Text\";import styles from\"./styles\";import View from\"react-native-web/dist/exports/View\";import Button from\"../Button\";import WordOption from\"../WordOption\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FillInTheBlank=function FillInTheBlank(_ref){var question=_ref.question,onCorrect=_ref.onCorrect,onWrong=_ref.onWrong;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),selectedOptions=_useState2[0],setSelectedOptions=_useState2[1];var _useState3=useState(question.parts),_useState4=_slicedToArray(_useState3,2),parts=_useState4[0],setParts=_useState4[1];var onButtonPress=function onButtonPress(){if(checkIfCorrect()){onCorrect();}else{onWrong();}};var addOptionsToSelected=function addOptionsToSelected(option){if(isSelected(option)){return;}var newParts=_toConsumableArray(parts);for(var i=0;i<newParts.length;i++){if(newParts[i].isBlank&&!newParts[i].selected){newParts[i].selected=option;break;}}setParts(newParts);};var removeOptionFromSelected=function removeOptionFromSelected(index){var newParts=_toConsumableArray(parts);newParts[index].selected=null;setParts(newParts);};var isSelected=function isSelected(option){return parts.filter(function(part){return part.isBlank&&part.selected===option;}).length>0;};var checkIfCorrect=function checkIfCorrect(){return parts.filter(function(part){return part.isBlank&&part.text!==part.selected;}).length===0;};var isReadyToCheck=function isReadyToCheck(){return parts.filter(function(part){return part.isBlank&&!part.selected;}).length>0;};return _jsxs(_Fragment,{children:[_jsx(Text,{style:styles.title,children:\"Complete the sentence\"}),_jsx(View,{style:styles.row,children:parts.map(function(part,index){if(part.isBlank){return _jsx(View,{style:styles.blank,children:part.selected&&_jsx(WordOption,{text:part==null?void 0:part.selected,onPress:function onPress(){return removeOptionFromSelected(index);}},index)});}else{return _jsx(Text,{style:styles.text,children:part.text});}})}),_jsx(View,{style:styles.optionsContainer,children:question==null?void 0:question.options.map(function(option,index){return _jsx(WordOption,{text:option,isSelected:isSelected(option),onPress:function onPress(){return addOptionsToSelected(option);}},index);})}),_jsx(Button,{text:\"Check\",onPress:onButtonPress,disabled:isReadyToCheck()})]});};export default FillInTheBlank;","map":{"version":3,"names":["styles","View","Button","WordOption","useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","FillInTheBlank","_ref","question","onCorrect","onWrong","_useState","_useState2","_slicedToArray","selectedOptions","setSelectedOptions","_useState3","parts","_useState4","setParts","onButtonPress","checkIfCorrect","addOptionsToSelected","option","isSelected","newParts","_toConsumableArray","i","length","isBlank","selected","removeOptionFromSelected","index","filter","part","text","isReadyToCheck","children","Text","style","title","row","map","blank","onPress","optionsContainer","options","disabled"],"sources":["C:/Users/Dell/projects/Duolingo/src/components/FillInTheBlank/FillInTheBlank.js"],"sourcesContent":["import { Text } from \"react-native\";\r\nimport styles from \"./styles\";\r\nimport { View } from \"react-native\";\r\nimport Button from \"../Button\";\r\nimport WordOption from \"../WordOption\";\r\nimport { useState } from \"react\";\r\nconst FillInTheBlank = ({ question, onCorrect, onWrong }) => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [parts, setParts] = useState(question.parts);\r\n  const onButtonPress = () => {\r\n    if (checkIfCorrect()) {\r\n      onCorrect();\r\n    } else {\r\n      onWrong();\r\n    }\r\n    // setSelectedOption(null);\r\n  };\r\n\r\n  const addOptionsToSelected = (option) => {\r\n    // const numberOfBlanks = question.parts.filter((part) => part.isBlank).length;\r\n    // if (numberOfBlanks > selectedOptions.length) {\r\n    //   setSelectedOptions([...selectedOptions, option]);\r\n    // }\r\n    if (isSelected(option)) {\r\n      return;\r\n    }\r\n    const newParts = [...parts];\r\n    for (let i = 0; i < newParts.length; i++) {\r\n      if (newParts[i].isBlank && !newParts[i].selected) {\r\n        newParts[i].selected = option;\r\n        break;\r\n      }\r\n    }\r\n    setParts(newParts);\r\n  };\r\n\r\n  const removeOptionFromSelected = (index) => {\r\n    const newParts = [...parts];\r\n    newParts[index].selected = null;\r\n    setParts(newParts);\r\n  };\r\n\r\n  const isSelected = (option) => {\r\n    return (\r\n      parts.filter((part) => part.isBlank && part.selected === option).length >\r\n      0\r\n    );\r\n  };\r\n\r\n  const checkIfCorrect = () => {\r\n    return (\r\n      parts.filter((part) => part.isBlank && part.text !== part.selected)\r\n        .length === 0\r\n    );\r\n  };\r\n  //   const isReadyToCheck = () => {\r\n  //     let v = parts.filter((part) => part.isBlank && !part.selected).length;\r\n\r\n  //     console.log(v);\r\n  //   };\r\n\r\n  //   const checkIfCorrect = () => {\r\n  //     const c = parts.filter(\r\n  //       (part) => part.isBlank && part.selected !== part.text\r\n  //     );\r\n  //     console.log(c);\r\n  //     // .length === 0;\r\n  //     // return c;\r\n  //   };\r\n  const isReadyToCheck = () => {\r\n    // return parts.filter((part) => part.isBlank && !part.selected).length > 0;\r\n    return parts.filter((part) => part.isBlank && !part.selected).length > 0;\r\n  };\r\n  return (\r\n    <>\r\n      <Text style={styles.title}>Complete the sentence</Text>\r\n\r\n      <View style={styles.row}>\r\n        {parts.map((part, index) => {\r\n          if (part.isBlank) {\r\n            return (\r\n              <View style={styles.blank}>\r\n                {part.selected && (\r\n                  <WordOption\r\n                    key={index}\r\n                    text={part?.selected}\r\n                    onPress={() => removeOptionFromSelected(index)}\r\n                  />\r\n                )}\r\n              </View>\r\n            );\r\n          } else {\r\n            return <Text style={styles.text}>{part.text}</Text>;\r\n          }\r\n        })}\r\n      </View>\r\n      <View style={styles.optionsContainer}>\r\n        {question?.options.map((option, index) => {\r\n          //   console.log(option);\r\n          return (\r\n            <WordOption\r\n              key={index}\r\n              text={option}\r\n              isSelected={isSelected(option)}\r\n              onPress={() => addOptionsToSelected(option)}\r\n            />\r\n          );\r\n        })}\r\n      </View>\r\n      <Button\r\n        text=\"Check\"\r\n        onPress={onButtonPress}\r\n        disabled={isReadyToCheck()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FillInTheBlank;\r\n\r\n// creates issues on removing item from an exact index. As second blank takes place of first one\r\n\r\n// import { Text } from \"react-native\";\r\n// import styles from \"./styles\";\r\n// import { View } from \"react-native\";\r\n// import Button from \"../Button\";\r\n// import WordOption from \"../WordOption\";\r\n// import { useState } from \"react\";\r\n// const FillInTheBlank = ({ question, onCorrect, onWrong }) => {\r\n//   const [selectedOptions, setSelectedOptions] = useState([]);\r\n//   console.log(selectedOptions);\r\n//   const onButtonPress = () => {\r\n//     // if (selectedOption === question.correct) {\r\n//     //   onCorrect();\r\n//     // } else {\r\n//     //   onWrong();\r\n//     // }\r\n//     // setSelectedOption(null);\r\n//   };\r\n\r\n//   const addOptionsToSelected = (option) => {\r\n//     const numberOfBlanks = question.parts.filter((part) => part.isBlank).length;\r\n//     if (numberOfBlanks > selectedOptions.length) {\r\n//       setSelectedOptions([...selectedOptions, option]);\r\n//     }\r\n//   };\r\n\r\n//   const removeOptionFromSelected = (option) => {\r\n//     setSelectedOptions(\r\n//       selectedOptions.filter((selectedOption) => selectedOption === option)\r\n//     );\r\n//   };\r\n//   console.log(selectedOptions);\r\n//   let blankIndex = -1;\r\n//   return (\r\n//     <>\r\n//       <Text style={styles.title}>Complete the sentence</Text>\r\n\r\n//       <View style={styles.row}>\r\n//         {question?.parts.map((part, index) => {\r\n//           if (part.isBlank) {\r\n//             blankIndex += 1;\r\n//             return (\r\n//               <View style={styles.blank}>\r\n//                 {selectedOptions.length > blankIndex && (\r\n//                   <WordOption\r\n//                     key={index}\r\n//                     text={selectedOptions[blankIndex]}\r\n//                     onPress={() =>\r\n//                       removeOptionFromSelected(selectedOptions[blankIndex])\r\n//                     }\r\n//                   />\r\n//                 )}\r\n//               </View>\r\n//             );\r\n//           } else {\r\n//             return <Text style={styles.text}>{part.text}</Text>;\r\n//           }\r\n//         })}\r\n//       </View>\r\n//       <View style={styles.optionsContainer}>\r\n//         {question?.options.map((option, index) => {\r\n//           //   console.log(option);\r\n//           return (\r\n//             <WordOption\r\n//               key={index}\r\n//               text={option}\r\n//               isSelected={selectedOptions.includes(option)}\r\n//               onPress={() => addOptionsToSelected(option)}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </View>\r\n//       <Button\r\n//         text=\"Check\"\r\n//         onPress={onButtonPress}\r\n//         disabled={!selectedOptions.length}\r\n//       />\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default FillInTheBlank;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}